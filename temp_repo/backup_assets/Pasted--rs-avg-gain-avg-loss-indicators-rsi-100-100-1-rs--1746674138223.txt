   
        rs = avg_gain / avg_loss
        indicators['rsi'] = 100 - (100 / (1 + rs))
        
        # Medias móviles
        indicators['sma_20'] = df['close'].rolling(window=20).mean()
        indicators['sma_50'] = df['close'].rolling(window=50).mean()
        indicators['sma_200'] = df['close'].rolling(window=200).mean()
        
        # MACD
        indicators['ema_12'] = df['close'].ewm(span=12, adjust=False).mean()
        indicators['ema_26'] = df['close'].ewm(span=26, adjust=False).mean()
        indicators['macd'] = indicators['ema_12'] - indicators['ema_26']
        indicators['macd_signal'] = indicators['macd'].ewm(span=9, adjust=False).mean()
        indicators['macd_hist'] = indicators['macd'] - indicators['macd_signal']
        
        # Bollinger Bands
        indicators['sma_20'] = df['close'].rolling(window=20).mean()
        indicators['upper_band'] = indicators['sma_20'] + (df['close'].rolling(window=20).std() * 2)
        indicators['lower_band'] = indicators['sma_20'] - (df['close'].rolling(window=20).std() * 2)
        
        # ATR (Average True Range)
        high_low = df['high'] - df['low']
        high_close = (df['high'] - df['close'].shift()).abs()
        low_close = (df['low'] - df['close'].shift()).abs()
        
        true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
        indicators['atr'] = true_range.rolling(window=14).mean()
        
        # Retornar solo los indicadores más recientes
        result = {}
        for key, value in indicators.items():
            if isinstance(value, pd.Series):
                result[key] = value.iloc[-1] if not pd.isna(value.iloc[-1]) else None
            else:
                result[key] = value
        
        return result
    
    def analyze_market(self, symbol: str, interval: str = '15m') -> Tuple[str, Dict]:
        """
        Analiza el mercado y genera señales de trading
        
        Args:
            symbol (str): Símbolo del instrumento
            interval (str): Intervalo de tiempo
            
        Returns:
            Tuple[str, Dict]: Señal de trading y detalles
        """
        # Obtener datos históricos
        df = self.get_historical_data(symbol, interval)
        
        if df.empty:
            logger.error("No se pudieron obtener datos para análisis")
            return "neutral", {}
        
        # Calcular indicadores
        indicators = self.calculate_indicators(df)
        
        if not indicators:
            logger.error("No se pudieron calcular indicadores")
            return "neutral", {}
        
        # Analizar RSI
        rsi = indicators.get('rsi')
        rsi_signal = "neutral"
        if rsi is not None:
            if rsi < 30:
                rsi_signal = "buy"  # Sobrevendido
            elif rsi > 70:
                rsi_signal = "sell"  # Sobrecomprado
        
        # Analizar tendencia con medias móviles
        sma_20 = indicators.get('sma_20')
        sma_50 = indicators.get('sma_50')
        trend_signal = "neutral"
        
        if sma_20 is not None and sma_50 is not None:
            if sma_20 > sma_50:
                trend_signal = "buy"  # Tendencia alcista
            elif sma_20 < sma_50:
                trend_signal = "sell"  # Tendencia bajista
        
        # Analizar MACD
        macd = indicators.get('macd')
        macd_signal = indicators.get('macd_signal')
        macd_hist = indicators.get('macd_hist')
        macd_signal_result = "neutral"
        
        if macd is not None and macd_signal is not None and macd_hist is not None:
            if macd > macd_signal and macd_hist > 0:
                macd_signal_result = "buy"  # Señal alcista
            elif macd < macd_signal and macd_hist < 0:
                macd_signal_result = "sell"  # Señal bajista
        
        # Analizar Bollinger Bands
        close = df['close'].iloc[-1] if not df.empty else None
        upper_band = indicators.get('upper_band')
        lower_band = indicators.get('lower_band')
        bb_signal = "neutral"
        
        if close is not None and upper_band is not None and lower_band is not None:
            if close > upper_band:
                bb_signal = "sell"  # Precio por encima de banda superior
            elif close < lower_band:
                bb_signal = "buy"  # Precio por debajo de banda inferior
        
        # Combinar señales
        signals = {
            'rsi': rsi_signal,
            'trend': trend_signal,
            'macd': macd_signal_result,
            'bollinger': bb_signal
        }
        
        # Contar señales
        buy_count = sum(1 for s in signals.values() if s == "buy")
        sell_count = sum(1 for s in signals.values() if s == "sell")
        
        # Determinar señal final
        final_signal = "neutral"
        if buy_count >= 3:
            final_signal = "strong_buy"
        elif buy_count >= 2:
            final_signal = "buy"
        elif sell_count >= 3:
            final_signal = "strong_sell"
        elif sell_count >= 2:
            final_signal = "sell"
        
        # Guardar en estado para análisis
        self.trading_data['strategy_signals'] = signals
        self.trading_data['integrated_signal'] = final_signal
        
        # Preparar detalles para retorno
        details = {
            'price': close,
            'rsi': rsi,
            'sma_20': sma_20,
            'sma_50': sma_50,
            'macd': macd,
            'macd_signal': macd_signal,
            'macd_hist': macd_hist,
            'upper_band': upper_band,
            'lower_band': lower_band,
            'signals': signals,
            'final_signal': final_signal
        }
        
        logger.info(f"Análisis de mercado: {final_signal} (RSI: {rsi:.2f}, Señales: {signals})")
        return final_signal, details
    
    def execute_strategy(self, symbol: str, interval: str = '15m') -> Dict:
        """
        Ejecuta la estrategia de trading
        
        Args:
            symbol (str): Símbolo del instrumento
            interval (str): Intervalo de tiempo
            
        Returns:
            Dict: Resultado de la ejecución
        """
        # Actualizar precio actual
        current_price = self.get_market_price(symbol)
        if not current_price:
            return {"status": "error", "message": "No se pudo obtener el precio actual"}
        
        # Guardar precio actual en el estado
        self.trading_data['current_price'] = current_price
        self.trading_data['symbol'] = symbol
        self.trading_data['interval'] = interval
        
        # Verificar si ya tenemos una posición abierta
        positions = self.get_positions(symbol)
        
        has_position = False
        position_side = None
        position_size = 0
        entry_price = 0
        
        for position in positions:
            if position['instId'] == symbol and float(position['pos']) != 0:
                has_position = True
                position_side = "buy" if float(position['pos']) > 0 else "sell"
                position_size = abs(float(position['pos']))
                entry_price = float(position['avgPx'])
                # Guardar en estado
                self.position = position
                self.trading_data['position'] = {
                    'side': position_side,
                    'size': position_size,
                    'entry_price': entry_price
                }
                self.trading_data['entry_price'] = entry_price
                break
        
        # Analizar mercado
        signal, details = self.analyze_market(symbol, interval)
        
        # Determinar acción basada en señal y posición
        action = "hold"
        reason = "Señal neutral o insuficiente"
        
        if not has_position:
            # Sin posición, evaluamos entrar
            if signal in ["strong_buy", "buy"]:
                action = "buy"
                reason = f"Señal de compra {signal}"
            elif signal in ["strong_sell", "sell"]:
                action = "sell"
                reason = f"Señal de venta {signal}"
        else: